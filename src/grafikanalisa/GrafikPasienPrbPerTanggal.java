    /*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DlgSpesialis.java
 *
 * Created on May 23, 2010, 1:25:13 AM
 */

package grafikanalisa;

import fungsi.WarnaTable;
import fungsi.akses;
import fungsi.koneksiDB;
import fungsi.sekuel;
import fungsi.validasi;
import java.awt.Cursor;
import java.awt.Dimension;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import jxl.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;

/**
 *
 * @author dosen
 */
public class GrafikPasienPrbPerTanggal extends javax.swing.JDialog {
    private final Connection koneksi=koneksiDB.condb();
    private final validasi Valid=new validasi();
    private sekuel Sequel=new sekuel();
    private ResultSet rs;
    private PreparedStatement ps;
    private final DefaultTableModel tabMode;
    private double total=0;
    private int i=0;

    /** Creates new form DlgSpesialis
     * @param parent
     * @param modal */
    public GrafikPasienPrbPerTanggal(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        
        tabMode=new DefaultTableModel(null,new Object[]{"Nama","No Kartu","JK","Tanggal SEP","Jenis PRB","No SEP","Tgl Lahir","Peserta",
            "DiagAwal","Nama Diagnosa","Poli"}){
              @Override public boolean isCellEditable(int rowIndex, int colIndex){return false;}
        };

        tbBangsal.setModel(tabMode);
        //tampil();
        //tbJabatan.setDefaultRenderer(Object.class, new WarnaTable(Scroll.getBackground(),Color.GREEN));
        tbBangsal.setPreferredScrollableViewportSize(new Dimension(500,500));
        tbBangsal.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

        for (i = 0; i < 11; i++) {
            TableColumn column = tbBangsal.getColumnModel().getColumn(i);
            if(i==0){
                column.setPreferredWidth(200);
            }else if(i==1){
                column.setPreferredWidth(100);
            }else if(i==2){
                column.setPreferredWidth(20);
            }else if(i==3){
                column.setPreferredWidth(70);
            }else if(i==4){
                column.setPreferredWidth(150);
            }else if(i==5){
                column.setPreferredWidth(150);
            }else if(i==6){
                column.setPreferredWidth(70);
            }else if(i==7){
                column.setPreferredWidth(100);
            }else if(i==8){
                column.setPreferredWidth(80);
            }else if(i==9){
                column.setPreferredWidth(150);
            }else if(i==10){
                column.setPreferredWidth(80);
            }else if(i==11){
                column.setPreferredWidth(50);    
            }
        }

        tbBangsal.setDefaultRenderer(Object.class, new WarnaTable());
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        internalFrame1 = new widget.InternalFrame();
        panelGlass5 = new widget.panelisi();
        jLabel33 = new widget.Label();
        Tanggal1 = new widget.Tanggal();
        jLabel32 = new widget.Label();
        Tanggal2 = new widget.Tanggal();
        BtnCari = new widget.Button();
        jLabel34 = new widget.Label();
        BtnPrint = new widget.Button();
        BtnPrint4 = new widget.Button();
        BtnPrint3 = new widget.Button();
        BtnPrint5 = new widget.Button();
        BtnPrint6 = new widget.Button();
        BtnKeluar3 = new widget.Button();
        Scroll = new widget.ScrollPane();
        tbBangsal = new widget.Table();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        internalFrame1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(240, 245, 235)), "::[ Grafik Pasien PRB\n Per Tanggal ]::", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(50, 50, 50))); // NOI18N
        internalFrame1.setName("internalFrame1"); // NOI18N
        internalFrame1.setLayout(new java.awt.BorderLayout(1, 1));

        panelGlass5.setName("panelGlass5"); // NOI18N
        panelGlass5.setPreferredSize(new java.awt.Dimension(55, 55));
        panelGlass5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 9));

        jLabel33.setText("Periode :");
        jLabel33.setName("jLabel33"); // NOI18N
        jLabel33.setPreferredSize(new java.awt.Dimension(55, 23));
        panelGlass5.add(jLabel33);

        Tanggal1.setForeground(new java.awt.Color(50, 70, 50));
        Tanggal1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "22-11-2024" }));
        Tanggal1.setDisplayFormat("dd-MM-yyyy");
        Tanggal1.setName("Tanggal1"); // NOI18N
        Tanggal1.setOpaque(false);
        Tanggal1.setPreferredSize(new java.awt.Dimension(90, 23));
        panelGlass5.add(Tanggal1);

        jLabel32.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel32.setText("s.d");
        jLabel32.setName("jLabel32"); // NOI18N
        jLabel32.setPreferredSize(new java.awt.Dimension(25, 23));
        panelGlass5.add(jLabel32);

        Tanggal2.setForeground(new java.awt.Color(50, 70, 50));
        Tanggal2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "22-11-2024" }));
        Tanggal2.setDisplayFormat("dd-MM-yyyy");
        Tanggal2.setName("Tanggal2"); // NOI18N
        Tanggal2.setOpaque(false);
        Tanggal2.setPreferredSize(new java.awt.Dimension(90, 23));
        panelGlass5.add(Tanggal2);

        BtnCari.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/accept.png"))); // NOI18N
        BtnCari.setMnemonic('1');
        BtnCari.setToolTipText("Alt+1");
        BtnCari.setName("BtnCari"); // NOI18N
        BtnCari.setPreferredSize(new java.awt.Dimension(28, 23));
        BtnCari.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnCariActionPerformed(evt);
            }
        });
        panelGlass5.add(BtnCari);

        jLabel34.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel34.setName("jLabel34"); // NOI18N
        jLabel34.setPreferredSize(new java.awt.Dimension(25, 23));
        panelGlass5.add(jLabel34);

        BtnPrint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/b_print.png"))); // NOI18N
        BtnPrint.setMnemonic('T');
        BtnPrint.setText("Cetak");
        BtnPrint.setToolTipText("Alt+T");
        BtnPrint.setName("BtnPrint"); // NOI18N
        BtnPrint.setPreferredSize(new java.awt.Dimension(100, 30));
        BtnPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnPrintActionPerformed(evt);
            }
        });
        panelGlass5.add(BtnPrint);

        BtnPrint4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/Bar Chart (copy).png"))); // NOI18N
        BtnPrint4.setMnemonic('G');
        BtnPrint4.setText("Plot");
        BtnPrint4.setToolTipText("Alt+G");
        BtnPrint4.setName("BtnPrint4"); // NOI18N
        BtnPrint4.setPreferredSize(new java.awt.Dimension(100, 30));
        BtnPrint4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnPrint4ActionPerformed(evt);
            }
        });
        BtnPrint4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BtnPrint4KeyPressed(evt);
            }
        });
        panelGlass5.add(BtnPrint4);

        BtnPrint3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/Bar Chart (copy).png"))); // NOI18N
        BtnPrint3.setMnemonic('G');
        BtnPrint3.setText("Batang");
        BtnPrint3.setToolTipText("Alt+G");
        BtnPrint3.setName("BtnPrint3"); // NOI18N
        BtnPrint3.setPreferredSize(new java.awt.Dimension(100, 30));
        BtnPrint3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnPrint3ActionPerformed(evt);
            }
        });
        BtnPrint3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BtnPrint3KeyPressed(evt);
            }
        });
        panelGlass5.add(BtnPrint3);

        BtnPrint5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/Bar Chart (copy).png"))); // NOI18N
        BtnPrint5.setMnemonic('G');
        BtnPrint5.setText("Pie");
        BtnPrint5.setToolTipText("Alt+G");
        BtnPrint5.setName("BtnPrint5"); // NOI18N
        BtnPrint5.setPreferredSize(new java.awt.Dimension(100, 30));
        BtnPrint5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnPrint5ActionPerformed(evt);
            }
        });
        BtnPrint5.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BtnPrint5KeyPressed(evt);
            }
        });
        panelGlass5.add(BtnPrint5);

        BtnPrint6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/Bar Chart (copy).png"))); // NOI18N
        BtnPrint6.setMnemonic('G');
        BtnPrint6.setText("Excel");
        BtnPrint6.setToolTipText("Alt+G");
        BtnPrint6.setName("BtnPrint6"); // NOI18N
        BtnPrint6.setPreferredSize(new java.awt.Dimension(100, 30));
        BtnPrint6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnPrint6ActionPerformed(evt);
            }
        });
        BtnPrint6.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BtnPrint6KeyPressed(evt);
            }
        });
        panelGlass5.add(BtnPrint6);

        BtnKeluar3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/exit.png"))); // NOI18N
        BtnKeluar3.setMnemonic('K');
        BtnKeluar3.setText("Keluar");
        BtnKeluar3.setToolTipText("Alt+K");
        BtnKeluar3.setName("BtnKeluar3"); // NOI18N
        BtnKeluar3.setPreferredSize(new java.awt.Dimension(100, 30));
        BtnKeluar3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnKeluar3ActionPerformed(evt);
            }
        });
        BtnKeluar3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BtnKeluar3KeyPressed(evt);
            }
        });
        panelGlass5.add(BtnKeluar3);

        internalFrame1.add(panelGlass5, java.awt.BorderLayout.PAGE_END);

        Scroll.setName("Scroll"); // NOI18N
        Scroll.setOpaque(true);

        tbBangsal.setToolTipText("Silahkan klik untuk memilih data yang mau diedit ataupun dihapus");
        tbBangsal.setName("tbBangsal"); // NOI18N
        Scroll.setViewportView(tbBangsal);

        internalFrame1.add(Scroll, java.awt.BorderLayout.CENTER);

        getContentPane().add(internalFrame1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        
    }//GEN-LAST:event_formWindowOpened

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        
    }//GEN-LAST:event_formWindowActivated

    private void BtnPrint3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnPrint3ActionPerformed
    DefaultCategoryDataset dcd = new DefaultCategoryDataset();
    try {                
        rs = koneksi.prepareStatement(
            "SELECT DATE(bs.tglsep) AS tanggal, COUNT(*) AS jumlah " +
            "FROM sik.bridging_sep bs " +
            "LEFT JOIN sik.bpjs_prb bp ON bs.no_sep = bp.no_sep " +
            "WHERE bs.tglsep BETWEEN '" + Valid.SetTgl(Tanggal1.getSelectedItem()+"") + 
            "' AND '" + Valid.SetTgl(Tanggal2.getSelectedItem()+"") + "' " +
            "GROUP BY DATE(bs.tglsep) ORDER BY tanggal ASC"
        ).executeQuery();
        
        while(rs.next()) {
            dcd.setValue(rs.getDouble("jumlah"), rs.getString("tanggal") + "(" + rs.getString("jumlah") + ")", rs.getString("tanggal"));
        }
        
        if(rs != null) {
            rs.close();
        }
    } catch (Exception e) {
        System.out.println("Notifikasi : " + e);
    }
    
    JFreeChart freeChart = ChartFactory.createBarChart(
        "Grafik Bridging SEP Per Tanggal Periode " + Valid.SetTgl(Tanggal1.getSelectedItem()+"") + " s.d. " + Valid.SetTgl(Tanggal2.getSelectedItem()+""),
        "Tanggal", "Jumlah", dcd, PlotOrientation.VERTICAL, true, true, true
    ); 
    
    ChartFrame cf = new ChartFrame("Grafik Bridging SEP Per Tanggal", freeChart);
    cf.setSize(Scroll.getWidth(), Scroll.getHeight());   
    cf.setModalExclusionType(ModalExclusionType.APPLICATION_EXCLUDE);
    cf.setLocationRelativeTo(Scroll);
    cf.setAlwaysOnTop(true);
    cf.setIconImage(new ImageIcon(super.getClass().getResource("/picture/addressbook-edit24.png")).getImage());
    cf.setVisible(true);  
    }//GEN-LAST:event_BtnPrint3ActionPerformed

    private void BtnPrint3KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BtnPrint3KeyPressed
        
    }//GEN-LAST:event_BtnPrint3KeyPressed

    private void BtnKeluar3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnKeluar3ActionPerformed
        dispose();
    }//GEN-LAST:event_BtnKeluar3ActionPerformed

    private void BtnKeluar3KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BtnKeluar3KeyPressed
        
    }//GEN-LAST:event_BtnKeluar3KeyPressed

    private void BtnPrint4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnPrint4ActionPerformed
       grafiksql2 kas = new grafiksql2(
        "Grafik Bridging SEP Per Tanggal Periode " + Valid.SetTgl(Tanggal1.getSelectedItem() + "") + " s.d. " + Valid.SetTgl(Tanggal2.getSelectedItem() + ""),
        "SELECT DATE(bs.tglsep) AS tanggal, COUNT(*) AS jumlah " +
        "FROM sik.bridging_sep bs " +
        "LEFT JOIN sik.bpjs_prb bp ON bs.no_sep = bp.no_sep " +
        "WHERE bs.tglsep BETWEEN '" + Valid.SetTgl(Tanggal1.getSelectedItem() + "") + 
        "' AND '" + Valid.SetTgl(Tanggal2.getSelectedItem() + "") + "' " +
        "GROUP BY DATE(bs.tglsep) " +
        "ORDER BY tanggal ASC",
        "Tanggal"
    );

    kas.setSize(Scroll.getWidth(), Scroll.getHeight());  
    kas.setModal(true);
    kas.setAlwaysOnTop(true);
    kas.setLocationRelativeTo(Scroll);
    kas.setVisible(true);
    }//GEN-LAST:event_BtnPrint4ActionPerformed

    private void BtnPrint4KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BtnPrint4KeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_BtnPrint4KeyPressed

    private void BtnPrint5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnPrint5ActionPerformed
        DefaultPieDataset dpd = new DefaultPieDataset();
        try {                
            rs = koneksi.prepareStatement(
                "SELECT bp.prb AS kategori, COUNT(*) AS jumlah " +
                "FROM sik.bridging_sep bs " +
                "LEFT JOIN sik.bpjs_prb bp ON bs.no_sep = bp.no_sep " +
                "WHERE bs.tglsep BETWEEN '" + Valid.SetTgl(Tanggal1.getSelectedItem() + "") + 
                "' AND '" + Valid.SetTgl(Tanggal2.getSelectedItem() + "") + "' " +
                "GROUP BY bp.prb " +
                "ORDER BY jumlah DESC"
            ).executeQuery();

            while (rs.next()) {
                String kategori = rs.getString("kategori");
                double jumlah = rs.getDouble("jumlah");

                // Tambahkan data ke dataset pie
                dpd.setValue((kategori == null ? "Tidak Tersedia" : kategori) + " (" + jumlah + ")", jumlah);
            }

            if (rs != null) {
                rs.close();
            }
        } catch (Exception e) {
            System.out.println("Notifikasi : " + e.getMessage());
        }

        JFreeChart freeChart = ChartFactory.createPieChart(
            "Distribusi Pasien PRB Berdasarkan PRB Periode " +
            Valid.SetTgl(Tanggal1.getSelectedItem() + "") + " s.d. " +
            Valid.SetTgl(Tanggal2.getSelectedItem() + ""), 
            dpd, true, true, false
        ); 

        ChartFrame cf = new ChartFrame("Grafik Distribusi Pasien PRB Berdasarkan PRB", freeChart);
        cf.setSize(Scroll.getWidth(), Scroll.getHeight());   
        cf.setLocationRelativeTo(Scroll);
        cf.setModalExclusionType(ModalExclusionType.APPLICATION_EXCLUDE);
        cf.setAlwaysOnTop(true);
        cf.setIconImage(new ImageIcon(super.getClass().getResource("/picture/addressbook-edit24.png")).getImage());
        cf.setVisible(true);  
    }//GEN-LAST:event_BtnPrint5ActionPerformed

    private void BtnPrint5KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BtnPrint5KeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_BtnPrint5KeyPressed

    private void BtnCariActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnCariActionPerformed
        tampil();
    }//GEN-LAST:event_BtnCariActionPerformed

    private void BtnPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnPrintActionPerformed
    this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

        if (tabMode.getRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "Maaf, tidak ada data yang dapat dicetak. Silakan periksa periode atau filter data Anda.");
        } else {
            // Persiapkan parameter untuk laporan
            Map<String, Object> param = new HashMap<>();
            param.put("namars", akses.getnamars());
            param.put("alamatrs", akses.getalamatrs());
            param.put("kotars", akses.getkabupatenrs());
            param.put("propinsirs", akses.getpropinsirs());
            param.put("kontakrs", akses.getkontakrs());
            param.put("emailrs", akses.getemailrs());
            param.put("periode", "Periode " + Tanggal1.getSelectedItem() + " s.d. " + Tanggal2.getSelectedItem());
            param.put("logo", Sequel.cariGambar("select setting.logo from setting"));

            // Kosongkan tabel sementara sebelum memasukkan data
            Sequel.queryu("DELETE FROM temporary_grafik_prb");

            // Masukkan data ke tabel sementara
            for (int r = 0; r < tabMode.getRowCount(); r++) {
                Sequel.menyimpan(
                    "temporary_grafik_prb",
                    "'0','" + tabMode.getValueAt(r, 0).toString() + "','" + 
                               tabMode.getValueAt(r, 1).toString() + "','" +
                               tabMode.getValueAt(r, 2).toString() + "','" +
                               tabMode.getValueAt(r, 3).toString() + "','" +
                               tabMode.getValueAt(r, 4).toString() + "','" +
                               tabMode.getValueAt(r, 5).toString() + "','" +
                               tabMode.getValueAt(r, 6).toString() + "','" +
                               tabMode.getValueAt(r, 7).toString() + "','" +
                               tabMode.getValueAt(r, 8).toString() + "','" +
                               tabMode.getValueAt(r, 9).toString() + "','" +
                               tabMode.getValueAt(r, 10).toString() + "','" +
                               tabMode.getValueAt(r, 11).toString() + "'",
                    "Grafik Data Pasien PRB"
                );
            }

            // Cetak laporan
            Valid.MyReport(
                "rptPasienPrbPerTanggal.jasper", // Nama file laporan yang relevan
                "report",
                "::[ Laporan Grafik Pasien PRB Per Tanggal ]::",
                param
            );
        }

        this.setCursor(Cursor.getDefaultCursor());
    }//GEN-LAST:event_BtnPrintActionPerformed

    private void BtnPrint6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnPrint6ActionPerformed
    DefaultPieDataset dpd = new DefaultPieDataset();
String fileName = System.getProperty("user.home") + "/Desktop/pasienprb.csv";

try {
    rs = koneksi.prepareStatement(
        "SELECT bp.prb AS kategori, COUNT(*) AS jumlah " +
        "FROM sik.bridging_sep bs " +
        "LEFT JOIN sik.bpjs_prb bp ON bs.no_sep = bp.no_sep " +
        "WHERE bs.tglsep BETWEEN '" + Valid.SetTgl(Tanggal1.getSelectedItem() + "") + 
        "' AND '" + Valid.SetTgl(Tanggal2.getSelectedItem() + "") + "' " +
        "AND bp.prb LIKE '%PRB%' " +
        "GROUP BY bp.prb " +
        "ORDER BY jumlah DESC"
    ).executeQuery();

    try (PrintWriter writer = new PrintWriter(new FileWriter(fileName))) {
        // Header CSV
        writer.println("Kategori,Jumlah");

        while (rs.next()) {
            String kategori = rs.getString("kategori");
            int jumlah = rs.getInt("jumlah");

            // Tambahkan data ke dataset pie
            dpd.setValue(kategori + " (" + jumlah + ")", jumlah);

            // Tambahkan data ke CSV
            writer.println(kategori + "," + jumlah);
        }
    }

    if (rs != null) {
        rs.close();
    }

    JOptionPane.showMessageDialog(null, "Data berhasil diekspor ke Desktop sebagai pasienprb.csv");
} catch (Exception e) {
    JOptionPane.showMessageDialog(null, "Error saat membuat CSV: " + e.getMessage());
}
    
    }//GEN-LAST:event_BtnPrint6ActionPerformed

    private void BtnPrint6KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BtnPrint6KeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_BtnPrint6KeyPressed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(() -> {
            GrafikPasienPrbPerTanggal dialog = new GrafikPasienPrbPerTanggal(new javax.swing.JFrame(), true);
            dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosing(java.awt.event.WindowEvent e) {
                    System.exit(0);
                }
            });
            dialog.setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private widget.Button BtnCari;
    private widget.Button BtnKeluar3;
    private widget.Button BtnPrint;
    private widget.Button BtnPrint3;
    private widget.Button BtnPrint4;
    private widget.Button BtnPrint5;
    private widget.Button BtnPrint6;
    private widget.ScrollPane Scroll;
    private widget.Tanggal Tanggal1;
    private widget.Tanggal Tanggal2;
    private widget.InternalFrame internalFrame1;
    private widget.Label jLabel32;
    private widget.Label jLabel33;
    private widget.Label jLabel34;
    private widget.panelisi panelGlass5;
    private widget.Table tbBangsal;
    // End of variables declaration//GEN-END:variables

    private void tampil() {
    // Validasi tanggal tidak boleh kosong
    if (Tanggal1.getSelectedItem() == null || Tanggal2.getSelectedItem() == null) {
        JOptionPane.showMessageDialog(null, "Tanggal tidak boleh kosong.");
        return;
    }

    // Kosongkan tabel sebelum menampilkan data baru
    Valid.tabelKosong(tabMode);

    try {
        ps = koneksi.prepareStatement(
            "SELECT " +
            "    bs.nama_pasien AS nama, " +
            "    bs.no_kartu, " +
            "    bs.jkel, " +
            "    bs.tglsep, " +
            "    bp.prb, " +
            "    bs.no_sep, " +
            "    bs.tanggal_lahir, " +
            "    bs.peserta, " +
            "    bs.diagawal, " +
            "    bs.nmdiagnosaawal, " +
            "    bs.kdpolitujuan, " +
            "    bs.nmpolitujuan, " +
            "    NULL AS no_sep_suplesi " +
            "FROM " +
            "    sik.bridging_sep bs " +
            "LEFT JOIN " +
            "    sik.bpjs_prb bp ON bs.no_sep = bp.no_sep " +
            "WHERE " +
            "    bs.tglsep BETWEEN '" + Valid.SetTgl(Tanggal1.getSelectedItem() + "") + 
            "' AND '" + Valid.SetTgl(Tanggal2.getSelectedItem() + "") + "' " +
            "    AND bp.prb LIKE '%PRB%' " + // Filter hanya data dengan kata "PRB"
            "ORDER BY bs.tglsep DESC"
        );

        try {
            rs = ps.executeQuery();
            while (rs.next()) {
                tabMode.addRow(new Object[]{
                    rs.getString("nama"),
                    rs.getString("no_kartu"),
                    rs.getString("jkel"),
                    rs.getString("tglsep"),
                    rs.getString("prb"),
                    rs.getString("no_sep"),
                    rs.getString("tanggal_lahir"),
                    rs.getString("peserta"),
                    rs.getString("diagawal"),
                    rs.getString("nmdiagnosaawal"),
                    rs.getString("kdpolitujuan"),
                    rs.getString("nmpolitujuan"),
                    rs.getString("no_sep_suplesi") == null ? "-" : rs.getString("no_sep_suplesi")
                });
            }
        } catch (SQLException e) {
            System.out.println("SQL Error: " + e.getMessage());
        } finally {
            if (rs != null) rs.close();
            if (ps != null) ps.close();
        }
    } catch (SQLException e) {
        System.out.println("Koneksi Error: " + e.getMessage());
    }
}

}
